// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = flutter_sdk.src__widgets__framework;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const binding = flutter_sdk.src__widgets__binding;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const scaffold = flutter_sdk.src__material__scaffold;
  const basic = flutter_sdk.src__widgets__basic;
  const flex = flutter_sdk.src__rendering__flex;
  const image = flutter_sdk.src__widgets__image;
  const text = flutter_sdk.src__widgets__text;
  const text_style = flutter_sdk.src__painting__text_style;
  const colors = flutter_sdk.src__material__colors;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const dialog = flutter_sdk.src__material__dialog;
  const text_button = flutter_sdk.src__material__text_button;
  const system_navigator = flutter_sdk.src__services__system_navigator;
  const media_query = flutter_sdk.src__widgets__media_query;
  const app_bar = flutter_sdk.src__material__app_bar;
  const alignment = flutter_sdk.src__painting__alignment;
  const box = flutter_sdk.src__rendering__box;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const sliver_grid = flutter_sdk.src__rendering__sliver_grid;
  const ink_well = flutter_sdk.src__material__ink_well;
  const grid_tile = flutter_sdk.src__material__grid_tile;
  const container = flutter_sdk.src__widgets__container;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const box_border = flutter_sdk.src__painting__box_border;
  const box_fit = flutter_sdk.src__painting__box_fit;
  const bottom_app_bar = flutter_sdk.src__material__bottom_app_bar;
  const icon_button = flutter_sdk.src__material__icon_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const dropdown = flutter_sdk.src__material__dropdown;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var splash_screen = Object.create(dart.library);
  var main_screen = Object.create(dart.library);
  var game_page = Object.create(dart.library);
  var options_screen = Object.create(dart.library);
  var high_scores = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $toList = dartx.toList;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    BuildContextToMainScreen: () => (T.BuildContextToMainScreen = dart.constFn(dart.fnType(main_screen.MainScreen, [framework.BuildContext])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    BuildContextToGamePage: () => (T.BuildContextToGamePage = dart.constFn(dart.fnType(game_page.GamePage, [framework.BuildContext])))(),
    BuildContextToAlertDialog: () => (T.BuildContextToAlertDialog = dart.constFn(dart.fnType(dialog.AlertDialog, [framework.BuildContext])))(),
    BuildContextToHighScores: () => (T.BuildContextToHighScores = dart.constFn(dart.fnType(high_scores.HighScores, [framework.BuildContext])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    BuildContextAndintToInkWell: () => (T.BuildContextAndintToInkWell = dart.constFn(dart.fnType(ink_well.InkWell, [framework.BuildContext, core.int])))(),
    DropdownButtonOfString: () => (T.DropdownButtonOfString = dart.constFn(dropdown.DropdownButton$(core.String)))(),
    DropdownMenuItemOfString: () => (T.DropdownMenuItemOfString = dart.constFn(dropdown.DropdownMenuItem$(core.String)))(),
    StringToDropdownMenuItemOfString: () => (T.StringToDropdownMenuItemOfString = dart.constFn(dart.fnType(T.DropdownMenuItemOfString(), [core.String])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNTovoid: () => (T.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T.StringN()])))(),
    RouteTobool: () => (T.RouteTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279377967
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "2 Player Game"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Single Player Game"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Alert"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Options Screen not implemented yet."
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "OK"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Options"
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "High Scores"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Exit"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "StarWars TicTacToe"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: sliver_grid.SliverGridDelegateWithFixedCrossAxisCount.prototype,
        [SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent]: null,
        [SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio]: 1,
        [SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing]: 0,
        [SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing]: 0,
        [SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount]: 3
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_value]: 700,
        [FontWeight_index]: 6
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[15] || CT.C15,
        [TextStyle_fontSize]: 24,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58136
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[17] || CT.C17
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58751
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[19] || CT.C19
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58644
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[21] || CT.C21
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[15] || CT.C15,
        [TextStyle_fontSize]: 16,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: C[23] || CT.C23,
        [Text_textSpan]: null,
        [Text_data]: "Select Theme:"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "This is a simple High Scores Screen!"
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: basic.Center.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: C[25] || CT.C25,
        [Align_heightFactor]: null,
        [Align_widthFactor]: null,
        [Align_alignment]: C[26] || CT.C26
      });
    }
  }, false);
  var C = Array(27).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/project/lib/screens/splash_screen.dart",
    "file:///zapp/project/lib/screens/main_screen.dart",
    "file:///zapp/project/lib/screens/game_page.dart",
    "file:///zapp/project/lib/screens/options_screen.dart",
    "file:///zapp/project/lib/screens/high_scores.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatefulWidget {
    static of(context) {
      return context.findAncestorStateOfType(main._MyAppState);
    }
    createState() {
      return new main._MyAppState.new();
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    createState: dart.fnType(main._MyAppState, [])
  }));
  dart.setStaticMethodSignature(main.MyApp, () => ['of']);
  dart.setLibraryUri(main.MyApp, I[0]);
  var _isDarkMode = dart.privateName(main, "_isDarkMode");
  main._MyAppState = class _MyAppState extends framework.State$(main.MyApp) {
    getIsDarkMode() {
      return this[_isDarkMode];
    }
    toggleTheme(isOn) {
      this.setState(dart.fn(() => {
        this[_isDarkMode] = isOn;
      }, T.VoidTovoid()));
    }
    build(context) {
      return new app.MaterialApp.new({title: "StarWars TicTacToe", theme: this[_isDarkMode] ? theme_data.ThemeData.dark() : theme_data.ThemeData.light(), home: new splash_screen.SplashScreen.new(), debugShowCheckedModeBanner: false});
    }
    static ['_#new#tearOff']() {
      return new main._MyAppState.new();
    }
  };
  (main._MyAppState.new = function() {
    this[_isDarkMode] = true;
    main._MyAppState.__proto__.new.call(this);
    ;
  }).prototype = main._MyAppState.prototype;
  dart.addTypeTests(main._MyAppState);
  dart.addTypeCaches(main._MyAppState);
  dart.setMethodSignature(main._MyAppState, () => ({
    __proto__: dart.getMethods(main._MyAppState.__proto__),
    getIsDarkMode: dart.fnType(core.bool, []),
    toggleTheme: dart.fnType(dart.void, [core.bool]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._MyAppState, I[0]);
  dart.setFieldSignature(main._MyAppState, () => ({
    __proto__: dart.getFields(main._MyAppState.__proto__),
    [_isDarkMode]: dart.fieldType(core.bool)
  }));
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  var Color_value = dart.privateName(ui, "Color.value");
  dart.defineLazy(main, {
    /*main.darkBlue*/get darkBlue() {
      return C[1] || CT.C1;
    }
  }, false);
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  splash_screen.SplashScreen = class SplashScreen extends framework.StatefulWidget {
    createState() {
      return new splash_screen._SplashScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new splash_screen.SplashScreen.new();
    }
  };
  (splash_screen.SplashScreen.new = function() {
    splash_screen.SplashScreen.__proto__.new.call(this);
    ;
  }).prototype = splash_screen.SplashScreen.prototype;
  dart.addTypeTests(splash_screen.SplashScreen);
  dart.addTypeCaches(splash_screen.SplashScreen);
  dart.setMethodSignature(splash_screen.SplashScreen, () => ({
    __proto__: dart.getMethods(splash_screen.SplashScreen.__proto__),
    createState: dart.fnType(splash_screen._SplashScreenState, [])
  }));
  dart.setLibraryUri(splash_screen.SplashScreen, I[1]);
  splash_screen._SplashScreenState = class _SplashScreenState extends framework.State$(splash_screen.SplashScreen) {
    initState() {
      super.initState();
      async.Timer.new(new core.Duration.new({seconds: 5}), dart.fn(() => {
        navigator.Navigator.of(this.context).pushReplacement(dart.dynamic, T.ObjectN(), new page.MaterialPageRoute.new({builder: dart.fn(_ => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}));
      }, T.VoidTovoid()));
    }
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new image.Image.asset("assets/logos/Star_Wars_Logo.png"), new basic.SizedBox.new({height: 20}), new text.Text.new("© Created \nfor Educational purposes at \nBlackpool and the Fylde College \nCallum Straathof \n30180903 \nAssignment 2 of 2.", {style: new text_style.TextStyle.new({fontSize: 14, fontWeight: ui.FontWeight.normal, color: colors.Colors.white}), textAlign: ui.TextAlign.center})])})})});
    }
    static ['_#new#tearOff']() {
      return new splash_screen._SplashScreenState.new();
    }
  };
  (splash_screen._SplashScreenState.new = function() {
    splash_screen._SplashScreenState.__proto__.new.call(this);
    ;
  }).prototype = splash_screen._SplashScreenState.prototype;
  dart.addTypeTests(splash_screen._SplashScreenState);
  dart.addTypeCaches(splash_screen._SplashScreenState);
  dart.setMethodSignature(splash_screen._SplashScreenState, () => ({
    __proto__: dart.getMethods(splash_screen._SplashScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(splash_screen._SplashScreenState, I[1]);
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  main_screen.MainScreen = class MainScreen extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T.JSArrayOfWidget().of([new image.Image.asset("assets/logos/Star_Wars_Logo.png", {width: 300, height: 300}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new game_page.GamePage.new({singlePlayerMode: false}), T.BuildContextToGamePage())}));
                  }, T.VoidTovoid()), child: C[3] || CT.C3})}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new game_page.GamePage.new({singlePlayerMode: true}), T.BuildContextToGamePage())}));
                  }, T.VoidTovoid()), child: C[4] || CT.C4})}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    dialog.showDialog(dart.dynamic, {context: context, builder: dart.fn(context => new dialog.AlertDialog.new({title: C[5] || CT.C5, content: C[6] || CT.C6, actions: T.JSArrayOfWidget().of([new text_button.TextButton.new({child: C[7] || CT.C7, onPressed: dart.fn(() => navigator.Navigator.of(context).pop(T.ObjectN()), T.VoidTovoid())})])}), T.BuildContextToAlertDialog())});
                  }, T.VoidTovoid()), child: C[8] || CT.C8})}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new high_scores.HighScores.new(), T.BuildContextToHighScores())}));
                  }, T.VoidTovoid()), child: C[9] || CT.C9})}), new basic.Padding.new({padding: C[2] || CT.C2, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                    system_navigator.SystemNavigator.pop();
                  }, T.VoidTovoid()), child: C[10] || CT.C10})})])})})});
    }
    static ['_#new#tearOff']() {
      return new main_screen.MainScreen.new();
    }
  };
  (main_screen.MainScreen.new = function() {
    main_screen.MainScreen.__proto__.new.call(this);
    ;
  }).prototype = main_screen.MainScreen.prototype;
  dart.addTypeTests(main_screen.MainScreen);
  dart.addTypeCaches(main_screen.MainScreen);
  dart.setMethodSignature(main_screen.MainScreen, () => ({
    __proto__: dart.getMethods(main_screen.MainScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main_screen.MainScreen, I[2]);
  var singlePlayerMode$ = dart.privateName(game_page, "GamePage.singlePlayerMode");
  game_page.GamePage = class GamePage extends framework.StatefulWidget {
    get singlePlayerMode() {
      return this[singlePlayerMode$];
    }
    set singlePlayerMode(value) {
      super.singlePlayerMode = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let singlePlayerMode = opts && 'singlePlayerMode' in opts ? opts.singlePlayerMode : null;
      return new game_page.GamePage.new({key: key, singlePlayerMode: singlePlayerMode});
    }
    createState() {
      return new game_page.GamePageState.new({singlePlayerMode: this.singlePlayerMode});
    }
  };
  (game_page.GamePage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let singlePlayerMode = opts && 'singlePlayerMode' in opts ? opts.singlePlayerMode : null;
    this[singlePlayerMode$] = singlePlayerMode;
    game_page.GamePage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = game_page.GamePage.prototype;
  dart.addTypeTests(game_page.GamePage);
  dart.addTypeCaches(game_page.GamePage);
  dart.setMethodSignature(game_page.GamePage, () => ({
    __proto__: dart.getMethods(game_page.GamePage.__proto__),
    createState: dart.fnType(game_page.GamePageState, [])
  }));
  dart.setLibraryUri(game_page.GamePage, I[3]);
  dart.setFieldSignature(game_page.GamePage, () => ({
    __proto__: dart.getFields(game_page.GamePage.__proto__),
    singlePlayerMode: dart.finalFieldType(core.bool)
  }));
  var singlePlayerMode$0 = dart.privateName(game_page, "GamePageState.singlePlayerMode");
  var board = dart.privateName(game_page, "GamePageState.board");
  var currentPlayer = dart.privateName(game_page, "GamePageState.currentPlayer");
  var statusMessage = dart.privateName(game_page, "GamePageState.statusMessage");
  var _checkWinner = dart.privateName(game_page, "_checkWinner");
  var _isDraw = dart.privateName(game_page, "_isDraw");
  var _makeAIMove = dart.privateName(game_page, "_makeAIMove");
  var _handleTap = dart.privateName(game_page, "_handleTap");
  var SliverGridDelegateWithFixedCrossAxisCount_mainAxisExtent = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.mainAxisExtent");
  var SliverGridDelegateWithFixedCrossAxisCount_childAspectRatio = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.childAspectRatio");
  var SliverGridDelegateWithFixedCrossAxisCount_crossAxisSpacing = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.crossAxisSpacing");
  var SliverGridDelegateWithFixedCrossAxisCount_mainAxisSpacing = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.mainAxisSpacing");
  var SliverGridDelegateWithFixedCrossAxisCount_crossAxisCount = dart.privateName(sliver_grid, "SliverGridDelegateWithFixedCrossAxisCount.crossAxisCount");
  var TextStyle_overflow = dart.privateName(text_style, "TextStyle.overflow");
  var TextStyle_fontVariations = dart.privateName(text_style, "TextStyle.fontVariations");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var FontWeight_value = dart.privateName(ui, "FontWeight.value");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  game_page.GamePageState = class GamePageState extends framework.State$(game_page.GamePage) {
    get singlePlayerMode() {
      return this[singlePlayerMode$0];
    }
    set singlePlayerMode(value) {
      super.singlePlayerMode = value;
    }
    get board() {
      return this[board];
    }
    set board(value) {
      this[board] = value;
    }
    get currentPlayer() {
      return this[currentPlayer];
    }
    set currentPlayer(value) {
      this[currentPlayer] = value;
    }
    get statusMessage() {
      return this[statusMessage];
    }
    set statusMessage(value) {
      this[statusMessage] = value;
    }
    static ['_#new#tearOff'](opts) {
      let singlePlayerMode = opts && 'singlePlayerMode' in opts ? opts.singlePlayerMode : null;
      return new game_page.GamePageState.new({singlePlayerMode: singlePlayerMode});
    }
    [_handleTap](index) {
      if (this.board[$_get](index) !== "" || this[_checkWinner]("X") || this[_checkWinner]("O")) return;
      this.setState(dart.fn(() => {
        this.board[$_set](index, this.currentPlayer);
        if (this[_checkWinner](this.currentPlayer)) {
          this.statusMessage = this.currentPlayer + " Wins!";
        } else if (this[_isDraw]()) {
          this.statusMessage = "Game is a Draw!";
        } else {
          this.currentPlayer = this.currentPlayer === "X" ? "O" : "X";
          this.statusMessage = "Current Player: " + this.currentPlayer;
          if (this.singlePlayerMode && this.currentPlayer === "O") {
            this[_makeAIMove]();
          }
        }
      }, T.VoidTovoid()));
    }
    [_isDraw]() {
      for (let cell of this.board) {
        if (cell[$isEmpty]) {
          return false;
        }
      }
      return !this[_checkWinner]("X") && !this[_checkWinner]("O");
    }
    [_checkWinner](player) {
      for (let i = 0; i < 9; i = i + 3) {
        if (this.board[$_get](i) === player && this.board[$_get](i + 1) === player && this.board[$_get](i + 2) === player) {
          return true;
        }
      }
      for (let i = 0; i < 3; i = i + 1) {
        if (this.board[$_get](i) === player && this.board[$_get](i + 3) === player && this.board[$_get](i + 6) === player) {
          return true;
        }
      }
      if (this.board[$_get](0) === player && this.board[$_get](4) === player && this.board[$_get](8) === player) {
        return true;
      }
      if (this.board[$_get](2) === player && this.board[$_get](4) === player && this.board[$_get](6) === player) {
        return true;
      }
      return false;
    }
    [_makeAIMove]() {
      let emptyCells = T.JSArrayOfint().of([]);
      for (let i = 0; i < this.board[$length]; i = i + 1) {
        if (this.board[$_get](i)[$isEmpty]) {
          emptyCells[$add](i);
        }
      }
      if (emptyCells[$isNotEmpty]) {
        let aiMoveIndex = emptyCells[$_get](math.Random.new().nextInt(emptyCells[$length]));
        this.board[$_set](aiMoveIndex, this.currentPlayer);
        if (this[_checkWinner](this.currentPlayer)) {
          this.statusMessage = this.currentPlayer + " Wins!";
        } else if (this[_isDraw]()) {
          this.statusMessage = "Game is a Draw!";
        } else {
          this.currentPlayer = this.currentPlayer === "X" ? "O" : "X";
          this.statusMessage = "Current Player: " + this.currentPlayer;
        }
      }
    }
    build(context) {
      let screenSize = media_query.MediaQuery.of(context).size;
      let gridDimension = screenSize.width < screenSize.height ? screenSize.width * 0.9 : screenSize.height * 0.9;
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[11] || CT.C11}), body: new basic.Align.new({alignment: alignment.Alignment.topCenter, child: new basic.ConstrainedBox.new({constraints: new box.BoxConstraints.new({maxWidth: gridDimension, maxHeight: gridDimension}), child: new basic.Column.new({children: T.JSArrayOfWidget().of([new basic.Expanded.new({child: new scroll_view.GridView.builder({padding: C[12] || CT.C12, gridDelegate: C[13] || CT.C13, itemCount: 9, itemBuilder: dart.fn((context, index) => new ink_well.InkWell.new({onTap: dart.fn(() => this[_handleTap](index), T.VoidTovoid()), child: new grid_tile.GridTile.new({child: new container.Container.new({decoration: new box_decoration.BoxDecoration.new({border: box_border.Border.all()}), child: new basic.Center.new({child: this.board[$_get](index)[$isEmpty] ? null : new image.Image.asset("assets/icons/" + this.board[$_get](index) + ".png", {fit: box_fit.BoxFit.cover})})})})}), T.BuildContextAndintToInkWell())})}), new basic.Padding.new({padding: C[12] || CT.C12, child: new text.Text.new(this.statusMessage, {style: C[14] || CT.C14})})])})})}), bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[16] || CT.C16, onPressed: dart.fn(() => {
                  navigator.Navigator.pop(T.ObjectN(), context);
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[18] || CT.C18, onPressed: dart.fn(() => {
                  navigator.Navigator.pop(T.ObjectN(), context);
                }, T.VoidTovoid())}), new icon_button.IconButton.new({icon: C[20] || CT.C20, onPressed: dart.fn(() => {
                  this.setState(dart.fn(() => {
                    this.board = T.ListOfString().filled(9, "");
                    this.currentPlayer = "X";
                    this.statusMessage = "Current Player: " + this.currentPlayer;
                  }, T.VoidTovoid()));
                }, T.VoidTovoid())})])})})});
    }
  };
  (game_page.GamePageState.new = function(opts) {
    let singlePlayerMode = opts && 'singlePlayerMode' in opts ? opts.singlePlayerMode : null;
    this[board] = T.ListOfString().filled(9, "");
    this[currentPlayer] = "X";
    this[statusMessage] = "Current Player: X";
    this[singlePlayerMode$0] = singlePlayerMode;
    game_page.GamePageState.__proto__.new.call(this);
    ;
  }).prototype = game_page.GamePageState.prototype;
  dart.addTypeTests(game_page.GamePageState);
  dart.addTypeCaches(game_page.GamePageState);
  dart.setMethodSignature(game_page.GamePageState, () => ({
    __proto__: dart.getMethods(game_page.GamePageState.__proto__),
    [_handleTap]: dart.fnType(dart.void, [core.int]),
    [_isDraw]: dart.fnType(core.bool, []),
    [_checkWinner]: dart.fnType(core.bool, [core.String]),
    [_makeAIMove]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(game_page.GamePageState, I[3]);
  dart.setFieldSignature(game_page.GamePageState, () => ({
    __proto__: dart.getFields(game_page.GamePageState.__proto__),
    singlePlayerMode: dart.finalFieldType(core.bool),
    board: dart.fieldType(core.List$(core.String)),
    currentPlayer: dart.fieldType(core.String),
    statusMessage: dart.fieldType(core.String)
  }));
  options_screen.OptionsScreen = class OptionsScreen extends framework.StatefulWidget {
    createState() {
      return new options_screen._OptionsScreenState.new();
    }
    static ['_#new#tearOff']() {
      return new options_screen.OptionsScreen.new();
    }
  };
  (options_screen.OptionsScreen.new = function() {
    options_screen.OptionsScreen.__proto__.new.call(this);
    ;
  }).prototype = options_screen.OptionsScreen.prototype;
  dart.addTypeTests(options_screen.OptionsScreen);
  dart.addTypeCaches(options_screen.OptionsScreen);
  dart.setMethodSignature(options_screen.OptionsScreen, () => ({
    __proto__: dart.getMethods(options_screen.OptionsScreen.__proto__),
    createState: dart.fnType(options_screen._OptionsScreenState, [])
  }));
  dart.setLibraryUri(options_screen.OptionsScreen, I[4]);
  var ___OptionsScreenState__selectedTheme = dart.privateName(options_screen, "_#_OptionsScreenState#_selectedTheme");
  var _selectedTheme = dart.privateName(options_screen, "_selectedTheme");
  options_screen._OptionsScreenState = class _OptionsScreenState extends framework.State$(options_screen.OptionsScreen) {
    get [_selectedTheme]() {
      let t0;
      t0 = this[___OptionsScreenState__selectedTheme];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_selectedTheme")) : t0;
    }
    set [_selectedTheme](_selectedTheme$35param) {
      this[___OptionsScreenState__selectedTheme] = _selectedTheme$35param;
    }
    initState() {
      let t0;
      super.initState();
      this[_selectedTheme] = (t0 = main.MyApp.of(this.context), t0 == null ? null : t0.getIsDarkMode()) === true ? "Dark" : "Light";
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[8] || CT.C8}), body: new basic.Center.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T.JSArrayOfWidget().of([C[22] || CT.C22, new (T.DropdownButtonOfString()).new({value: this[_selectedTheme], items: T.JSArrayOfString().of(["Dark", "Light"])[$map](T.DropdownMenuItemOfString(), dart.fn(value => new (T.DropdownMenuItemOfString()).new({value: value, child: new text.Text.new(value)}), T.StringToDropdownMenuItemOfString()))[$toList](), onChanged: dart.fn(newValue => {
                  this.setState(dart.fn(() => {
                    this[_selectedTheme] = dart.nullCheck(newValue);
                    dart.nullCheck(main.MyApp.of(context)).toggleTheme(this[_selectedTheme] === "Dark");
                  }, T.VoidTovoid()));
                }, T.StringNTovoid())})])})}), bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[16] || CT.C16, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new options_screen._OptionsScreenState.new();
    }
  };
  (options_screen._OptionsScreenState.new = function() {
    this[___OptionsScreenState__selectedTheme] = null;
    options_screen._OptionsScreenState.__proto__.new.call(this);
    ;
  }).prototype = options_screen._OptionsScreenState.prototype;
  dart.addTypeTests(options_screen._OptionsScreenState);
  dart.addTypeCaches(options_screen._OptionsScreenState);
  dart.setMethodSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getMethods(options_screen._OptionsScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getGetters(options_screen._OptionsScreenState.__proto__),
    [_selectedTheme]: core.String
  }));
  dart.setSetterSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getSetters(options_screen._OptionsScreenState.__proto__),
    [_selectedTheme]: core.String
  }));
  dart.setLibraryUri(options_screen._OptionsScreenState, I[4]);
  dart.setFieldSignature(options_screen._OptionsScreenState, () => ({
    __proto__: dart.getFields(options_screen._OptionsScreenState.__proto__),
    [___OptionsScreenState__selectedTheme]: dart.fieldType(dart.nullable(core.String))
  }));
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var Align_heightFactor = dart.privateName(basic, "Align.heightFactor");
  var Align_widthFactor = dart.privateName(basic, "Align.widthFactor");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var Align_alignment = dart.privateName(basic, "Align.alignment");
  high_scores.HighScores = class HighScores extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[9] || CT.C9}), body: C[24] || CT.C24, bottomNavigationBar: new bottom_app_bar.BottomAppBar.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, mainAxisAlignment: flex.MainAxisAlignment.spaceEvenly, children: T.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: C[16] || CT.C16, onPressed: dart.fn(() => {
                  navigator.Navigator.pushAndRemoveUntil(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main_screen.MainScreen.new(), T.BuildContextToMainScreen())}), dart.fn(route => false, T.RouteTobool()));
                }, T.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new high_scores.HighScores.new();
    }
  };
  (high_scores.HighScores.new = function() {
    high_scores.HighScores.__proto__.new.call(this);
    ;
  }).prototype = high_scores.HighScores.prototype;
  dart.addTypeTests(high_scores.HighScores);
  dart.addTypeCaches(high_scores.HighScores);
  dart.setMethodSignature(high_scores.HighScores, () => ({
    __proto__: dart.getMethods(high_scores.HighScores.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(high_scores.HighScores, I[5]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/screens/splash_screen.dart": splash_screen,
    "file:///zapp/project/lib/screens/main_screen.dart": main_screen,
    "file:///zapp/project/lib/screens/game_page.dart": game_page,
    "file:///zapp/project/lib/screens/options_screen.dart": options_screen,
    "file:///zapp/project/lib/screens/high_scores.dart": high_scores
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/screens/splash_screen.dart","/zapp/project/lib/screens/main_screen.dart","/zapp/project/lib/screens/game_page.dart","/zapp/project/lib/screens/options_screen.dart","/zapp/project/lib/screens/high_scores.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__screens__splash_screen: splash_screen,
    zapp__project__lib__screens__main_screen: main_screen,
    zapp__project__lib__screens__game_page: game_page,
    zapp__project__lib__screens__options_screen: options_screen,
    zapp__project__lib__screens__high_scores: high_scores
  };
}));

//# sourceMappingURL=main.js.map
